security:
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    providers:
        app_user_provider:
            entity:
                class: App\Entity\Usuario
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            stateless: true  # API sin estado
            jwt: ~  # Usa JWT para autenticación
            # Rutas públicas (login, register, refresh, logout)
            pattern: ^/(auth|register|auth/refresh|auth/logout|auth/status)$
            security: false  # No requiere autenticación
        api:
            pattern: ^/api
            stateless: true
            jwt: ~  # Usa JWT para autenticación
    access_control:
        # Rutas públicas
        - { path: ^/auth, roles: PUBLIC_ACCESS }
        - { path: ^/register, roles: PUBLIC_ACCESS }
        - { path: ^/auth/refresh, roles: PUBLIC_ACCESS }
        - { path: ^/auth/logout, roles: PUBLIC_ACCESS }

        # Rutas protegidas
        - { path: ^/api/protected, roles: ROLE_USER }
        - { path: ^/api/protected/admin, roles: ROLE_ADMIN }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
