security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\Usuario
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true
                # Ruta de Login - abierta para usuarios no autenticados
        login:
            # Define la ruta para el inicio de sesión (login)
            pattern: ^/auth$
            # No mantiene estado, lo que significa que no guarda sesión entre peticiones
            stateless: true
            # No se requiere seguridad para acceder a esta ruta (pública)
            security: false

        register:
            # Define la ruta para el registro de usuarios
            pattern: ^/register$
            # No mantiene estado (sin sesión entre peticiones)
            stateless: true
            # No requiere autenticación o seguridad para acceder a esta ruta (pública)
            security: false

        refresh:
            # Define la ruta para actualizar el token de acceso (refresh)
            pattern: ^/auth/refresh$
            # No mantiene estado (sin sesión entre peticiones)
            stateless: true
            # No requiere seguridad para esta ruta (pública, solo actualizar tokens)
            security: false

        logout:
            # Define la ruta para cerrar sesión (logout)
            pattern: ^/auth/logout$
            # No mantiene estado (sin sesión entre peticiones)
            stateless: true
            # No se requiere seguridad para acceder a esta ruta (pública)
            security: false

        api_protected:
            # Define la ruta para las APIs protegidas
            pattern: ^/api/protected/
            # No mantiene estado, es decir, cada petición será independiente
            stateless: true
            # Requiere JWT (JSON Web Token) para autenticación, es decir, el acceso a esta ruta está protegido
            jwt: ~

        api_protected_admin:
            # Define la ruta protegida solo para administradores
            pattern: ^/api/protected/admin/
            # No mantiene estado (sin sesión entre peticiones)
            stateless: true
            # Requiere autenticación con JWT
            jwt: ~

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # Rutas públicas para login y registro
        - { path: ^/auth, roles: PUBLIC_ACCESS }
        - { path: ^/register, roles: PUBLIC_ACCESS }

        # Protegemos /api/protected solo para usuarios autenticados
        - { path: ^/api/protected, roles: ROLE_USER }

        # Protegemos /api/protected/admin solo para administradores
        - { path: ^/api/protected/admin, roles: ROLE_ADMIN }

        # Permitir el acceso anónimo a toda la API pública
        - { path: ^/api, roles: PUBLIC_ACCESS }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
